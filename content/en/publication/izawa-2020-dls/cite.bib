@inproceedings{izawa2020dls,
 abstract = {Most virtual machines employ just-in-time (JIT) compilers to achieve high-performance. Trace-based compilation and method-based compilation are two major compilation strategies in JIT compilers. In general, the former excels in compiling programs with more in-depth method calls and more dynamic branches, while the latter is suitable for a wide range of programs. Some previous studies have suggested that each strategy has its advantages and disadvantages, and there is no clear winner.  In this paper, we present a new approach, namely, the meta-hybrid JIT compilation strategy. It combines trace-based and method-based compilations to utilize the advantages of both strategies. Moreover, it is realized as a meta JIT compiler framework; thus, we can generate a VM with a hybrid JIT compiler that can apply different program parts by merely writing an interpreter with our framework.  We chose to extend a meta-tracing JIT compiler and supported the two compilations on it. As a prototype, we implemented a simple meta-tracing JIT compiler framework called BacCaml based on the MinCaml compiler by following RPython’s architecture.  We evaluated its performance by creating a small functional programming language with BacCaml and running microbenchmark programs. Furthermore, we performed a synthetic experiment to confirm that there are programs that run faster by hybrid compilation.},
 address = {New York, NY, USA},
 annote = {refereed},
 author = {Izawa, Yusuke and Masuhara, Hidehiko},
 booktitle = {Proceedings of the 16th ACM SIGPLAN International Symposium on Dynamic Languages},
 date = {2020-11-17},
 doi = {10.1145/3426422.3426977},
 isbn = {9781450381758},
 keywords = {JIT compiler, RPython, meta-tracing JIT compiler, language implementation framework},
 location = {Virtual, USA},
 note = {\textbfRefereed. 15 pages},
 numpages = {15},
 pages = {1–15},
 publisher = {Association for Computing Machinery},
 series = {DLS 2020},
 title = {Amalgamating Different JIT Compilations in a Meta-Tracing JIT Compiler Framework},
 year = {2020}
}
