@inproceedings{10.1145/3328433.3328439,
 abstract = {Meta-interpreter-based just-in-time compiler frameworks provide a convenient way for language designers to implement efficient virtual machines. Those frameworks either employ tracing-based or method- (or partial evaluation) based strategies, which have their own pros and cons. This paper proposes an approach to enable both tracing- and method-based compilation so that the runtime can selectively apply an appropriate strategy to different parts of a program. The proposal basically extends a meta-tracing compiler to method-based compilation by roll backing at conditional branches, trace-splitting at loop entries, and not following at function calls. As a proof-of-concept, we implemented a tiny meta-tracing compiler in MinCaml by following the RPython's architecture and extended it to support both tracing- and method-based compilation.},
 address = {New York, NY, USA},
 annote = {refereed},
 articleno = {5},
 author = {Izawa, Yusuke and Masuhara, Hidehiko and Aotani, Tomoyuki},
 booktitle = {Proceedings of the Conference Companion of the 3rd International Conference on Art, Science, and Engineering of Programming},
 date = {2019-04-02},
 doi = {10.1145/3328433.3328439},
 isbn = {9781450362573},
 keywords = {language implementation frameworks, tracing JIT compilation, RPython},
 location = {Genova, Italy},
 note = {\textbfRefereed. 3 pages},
 numpages = {3},
 pages = {1-3},
 publisher = {Association for Computing Machinery},
 series = {Programming 2019},
 title = {Extending a Meta-Tracing Compiler to Mix Method and Tracing Compilation},
 year = {2019}
}
